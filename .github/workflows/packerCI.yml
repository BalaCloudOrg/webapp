name: packerCI

on:
  pull_request:
  push:
    branches:
      - main

jobs:
  packer-format:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    env:
      GOOGLE_APPLICATION_CREDENTIALS: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}
      PROJECT_NAME: webapp-infra
      REGION: us-east1
      MACHINE_TYPE: e2-medium
      NETWORK: a3-vpc
      SUBNET: webapp
      TAG: web-app
      SERVICE_ACCOUNT: vm-service-account@webapp-infra.iam.gserviceaccount.com
      SCOPES: logging-write,monitoring-write,pubsub,cloud-platform
      BOOT_DISK_TYPE: pd-balanced
      MIG_NAME: my-mig
      TEMPLATE_NAME: updated-template-${{ secrets.CUSTOM_IMAGE_ID }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Verifies the format of Packer files
        run: packer fmt -check ./packer/templates/template.pkr.hcl

      - name: "GCloud auth"
        uses: "google-github-actions/auth@v2"
        with:
          credentials_json: "${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}"

      - name: "Set up GCloud SDK"
        uses: "google-github-actions/setup-gcloud@v2"

      - name: Create new instance template using the new custom image
        run: |
          gcloud compute instance-templates create ${{ env.TEMPLATE_NAME }}\
            --machine-type=${{ env.MACHINE_TYPE }}\
            --region=${{ env.REGION }}\
            --instance-template-region=${{ env.REGION }}\
            --metadata=startup-script='#!/bin/bash
            if [ ! -f /opt/config.env ]; then
              cat <<EOF > /opt/config.env
              MYSQL_DATABASE=${{ secrets.MYSQL_DATABASE }}
              MYSQL_USER=${{ secrets.MYSQL_USER }}
              MYSQL_PASSWORD=${{ secrets.MYSQL_PASSWORD }}
              MYSQL_HOST=${{ secrets.MYSQL_HOST }}
          EOF
            else
              echo "file already exists"
            fi'\
            --network-tier=PREMIUM
            --network=projects/${{ env.PROJECT_NAME }}/global/networks/${{ env.NETWORK }}\
            --subnet=projects/${{ env.PROJECT_NAME }}/regions/us-east1/subnetworks/${{ env.SUBNET }}\
            --tags=${{ env.TAG }}\
            --service-account=${{ env.SERVICE_ACCOUNT }}\
            --scopes=${{ env.SCOPES }}\
            --image=${{ secrets.CUSTOM_IMAGE_ID }}\
            --boot-disk-type=${{ env.BOOT_DISK_TYPE }}\
            --boot-disk-kms-keyring=projects/${{ env.PROJECT_NAME }}/locations/${{ env.REGION }}/keyRings/${{ secrets.KMS_KEYRING }}\
            --boot-disk-kms-key=projects/${{ env.PROJECT_NAME }}/locations/${{ env.REGION }}/keyRings/${{ secrets.KMS_KEYRING }}/cryptoKeys/${{ secrets.KMS_KEY }}

      - name: Set the Managed Instance Group to use the new instance template
        run: gcloud compute instance-groups managed set-instance-template ${{ env.MIG_NAME }} --template=https://www.googleapis.com/compute/v1/projects/${{ env.PROJECT_NAME }}/regions/${{ env.REGION }}/instanceTemplates/${{ env.TEMPLATE_NAME }} --region=${{ env.REGION }}

      - name: Set the Managed Instance Group to update existing VMs with the new instance template
        run: gcloud compute instance-groups managed rolling-action start-update ${{ env.MIG_NAME }} --version=template=https://www.googleapis.com/compute/v1/projects/${{ env.PROJECT_NAME }}/regions/${{ env.REGION }}/instanceTemplates/${{ env.TEMPLATE_NAME }} --region=${{ env.REGION }}

      - name: Wait till all the existing VMs gets updated with the new template
        run: gcloud compute instance-groups managed wait-until ${{ env.MIG_NAME }} --version-target-reached --region=${{ env.REGION }}

  packer-validate:
    if: github.event_name == 'pull_request'
    needs: [packer-format]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

        # The presence of this zip in the root directory is required for packer validate
        # since in the file provisioner of the main packer excepts to find a zip file
        # ../../zipfile to build the custom image
      - name: Zip application code
        run: zip -r test-src.zip .

      - name: Packer init - get plugins
        run: packer init .
        working-directory: "./packer/templates"

      - name: Validate Packer template
        run: packer validate .
        working-directory: "./packer/templates"

      - name: Clear up the application zip file
        run: rm -rf test-src.zip

  packer-build:
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    env:
      GOOGLE_APPLICATION_CREDENTIALS: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}
      PROJECT_NAME: webapp-infra
      REGION: us-east1
      MACHINE_TYPE: e2-medium
      NETWORK: a3-vpc
      SUBNET: webapp
      TAG: web-app
      SERVICE_ACCOUNT: vm-service-account@webapp-infra.iam.gserviceaccount.com
      SCOPES: logging-write,monitoring-write,pubsub,cloud-platform
      BOOT_DISK_TYPE: pd-balanced
      MIG_NAME: my-mig
      TEMPLATE_NAME: updated-template-${{ secrets.CUSTOM_IMAGE_ID }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Zip application code
        run: zip -r test-src.zip .

      - name: "GCloud auth"
        uses: "google-github-actions/auth@v2"
        with:
          credentials_json: "${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}"

      - name: "Set up GCloud SDK"
        uses: "google-github-actions/setup-gcloud@v2"

      - name: Packer init - get plugins
        run: packer init .
        working-directory: "./packer/templates"

      - name: Prepare environment variables
        run: echo "TIMESTAMP=$(date +%Y%m%d%H%M%S)" >> $GITHUB_ENV

      - name: Build Packer image
        run: packer build -var "project_id=${{ secrets.GCP_PROJECT_ID }}" -var "image_name=${{ secrets.CUSTOM_IMAGE_ID }}" template.pkr.hcl
        working-directory: "./packer/templates"

      - name: Create new instance template using the new custom image
        run: |
          gcloud compute instance-templates create ${{ env.TEMPLATE_NAME }}\
            --machine-type=${{ env.MACHINE_TYPE }}\
            --region=${{ env.REGION }}\
            --instance-template-region=${{ env.REGION }}\
            --metadata=startup-script='#!/bin/bash
            if [ ! -f /opt/config.env ]; then
              cat <<EOF > /opt/config.env
              MYSQL_DATABASE=${{ secrets.MYSQL_DATABASE }}
              MYSQL_USER=${{ secrets.MYSQL_USER }}
              MYSQL_PASSWORD=${{ secrets.MYSQL_PASSWORD }}
              MYSQL_HOST=${{ secrets.MYSQL_HOST }}
          EOF
            else
              echo "file already exists"
            fi'\
            --network=projects/${{ env.PROJECT_NAME }}/global/networks/${{ env.NETWORK }}\
            --subnet=projects/${{ env.PROJECT_NAME }}/regions/us-east1/subnetworks/${{ env.SUBNET }}\
            --tags=${{ env.TAG }}\
            --service-account=${{ env.SERVICE_ACCOUNT }}\
            --scopes=${{ env.SCOPES }}\
            --image=${{ secrets.CUSTOM_IMAGE_ID }}\
            --boot-disk-type=${{ env.BOOT_DISK_TYPE }}\
            --boot-disk-kms-keyring=projects/${{ env.PROJECT_NAME }}/locations/${{ env.REGION }}/keyRings/${{ secrets.KMS_KEYRING }}\
            --boot-disk-kms-key=projects/${{ env.PROJECT_NAME }}/locations/${{ env.REGION }}/keyRings/${{ secrets.KMS_KEYRING }}/cryptoKeys/${{ secrets.KMS_KEY }}\
            --no-address

      - name: Set the Managed Instance Group to use the new instance template
        run: gcloud compute instance-groups managed set-instance-template ${{ env.MIG_NAME }} --template=https://www.googleapis.com/compute/v1/projects/${{ env.PROJECT_NAME }}/regions/${{ env.REGION }}/instanceTemplates/${{ env.TEMPLATE_NAME }} --region=${{ env.REGION }}

      - name: Set the Managed Instance Group to update existing VMs with the new instance template
        run: gcloud compute instance-groups managed rolling-action start-update ${{ env.MIG_NAME }} --version=template=https://www.googleapis.com/compute/v1/projects/${{ env.PROJECT_NAME }}/regions/${{ env.REGION }}/instanceTemplates/${{ env.TEMPLATE_NAME }} --region=${{ env.REGION }}

      - name: Wait till all the existing VMs gets updated with the new template
        run: gcloud compute instance-groups managed wait-until ${{ env.MIG_NAME }} --version-target-reached --region=${{ env.REGION }}
